{"version":3,"sources":["api/index.ts","components/Search.tsx","components/List.tsx","components/LoadMore.tsx","reducer/actions.ts","reducer/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["searchRequest","query","page","a","fetch","process","toString","data","json","Response","Search","totalResults","Error","Input","SearchComponent","onSearch","placeholder","enterButton","Text","Typography","Paragraph","ListComponent","movies","loadMore","size","itemLayout","dataSource","rowKey","item","Title","renderItem","Item","extra","src","Poster","width","alt","Meta","title","strong","Year","Type","LoadMoreComponent","onLoad","hasMore","loading","className","onClick","NEW_SEARCH","ADD_MOVIE","newSearch","total","type","payload","initialState","refetchingLoding","searchLoding","reducer","state","App","useReducer","useMainState","dispatch","console","log","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.523fa7b1.chunk.js","sourcesContent":["import { SearchResult, Response } from './types';\n\nexport const searchRequest: (query: string, page: number) => Promise<SearchResult> = async (query, page) => {\n    const data = await fetch(`http://www.omdbapi.com/?apikey=${process.env.REACT_APP_API_KEY}&s=${query}&page=${page.toString()}`);\n    const json: Response = await data.json();\n\n    if (json.Response === \"True\") {\n        return {\n            Search: json.Search,\n            totalResults: json.totalResults,\n        }\n    }\n\n    throw new Error(json.Error);\n};\n\n","import React from 'react';\nimport { Input } from 'antd';\n\nconst {Search} = Input;\n\ntype SearchComponentProps = {\n    onSearch: (query: string) => void;\n}\n\nexport const SearchComponent: React.FC<SearchComponentProps> = ({onSearch}) => {\n    return (<div>\n            <Search placeholder=\"title\" onSearch={onSearch} enterButton />\n        </div>);\n}\n","import React from 'react';\nimport { MovieInSearch } from '../types';\nimport { List, Typography } from 'antd';\n\ntype ListComponentProps = {movies: MovieInSearch[]; loadMore: React.ReactNode}\n\nconst {Text, Paragraph} = Typography;\n\nexport const ListComponent: React.FC<ListComponentProps> = ({movies, loadMore}) => {\n    return (<List\n        size=\"large\"\n        itemLayout=\"vertical\"\n        dataSource={movies}\n        loadMore={loadMore}\n        rowKey={(item) => item.Title}\n        renderItem={(item) => (<List.Item \n            extra={<img src={item.Poster} width={150} alt=\"Poster\" />}\n            >\n                <List.Item.Meta \n                    title={item.Title}\n                />\n                <Paragraph><Text strong>Year</Text>: {item.Year}</Paragraph>\n                <Paragraph><Text strong>Type</Text>: {item.Type}</Paragraph>\n        </List.Item>)}\n    />)\n}\n\n","import React from 'react';\nimport { Button } from 'antd';\nimport './LoadMore.css';\n\ntype LoadMoreComponentProps = {\n    onLoad: () => void;\n    hasMore: boolean;\n    loading: boolean;\n}\n\nexport const LoadMoreComponent: React.FC<LoadMoreComponentProps> = ({onLoad, hasMore, loading}) => {\n    return hasMore && !loading ? (<div className=\"load-more\">\n            <Button onClick={onLoad}>Load more</Button>\n        </div>) : <></>;\n};\n","import { MovieInSearch } from '../types';\n\nexport const START_LOADING = 'START_LOADING';\n\nexport const START_REFETCHING = 'START_REFETCHING';\n\nexport const STOP_LOADING = 'STOP_LOADING';\n\nexport const STOP_REFETCHING = 'STOP_REFETCHING';\n\nexport const NEW_SEARCH = 'NEW_SEARCH';\n\nexport const ADD_MOVIE = 'ADD_MOVIE';\n\nexport const startLoadingAction = () => ({type: START_LOADING});\n\nexport const startRefetchingAction = () => ({type: START_REFETCHING});\n\nexport const stopLoadingAction = () => ({type: STOP_LOADING});\n\nexport const stopRefetchingAction = () => ({type: STOP_REFETCHING});\n\nexport const newSearch = (movies: MovieInSearch[], total: number, query: string) => ({type: NEW_SEARCH, payload: {movies, total, query}});\n\nexport const addMovie = (movies: MovieInSearch[]) => ({type: ADD_MOVIE, payload: {movies}});\n","import { useReducer, Dispatch, ReducerAction, ReducerState } from 'react';\nimport { InitialState, MainReducer } from './types';\nimport { NEW_SEARCH, ADD_MOVIE } from './actions';\n\nconst initialState: InitialState = {\n    movies: [],\n    total: 0,\n    query: '',\n    page: 1,\n    refetchingLoding: false,\n    searchLoding: false,\n}\n\nconst reducer: MainReducer = (state, {type, payload}) => {\n    switch (type) {\n        case NEW_SEARCH:\n            return {\n                ...state,\n                movies: payload.movies,\n                total: payload.total,\n                query: payload.query,\n                page: 2,\n            }\n        case ADD_MOVIE:\n            return {\n                ...state,\n                movies: [...state.movies, ...payload.movies],\n                page: state.page + 1,\n            }\n        default: \n           throw new Error('no default action')\n    } \n}\n\nconst useMainState: () => [ReducerState<MainReducer>, Dispatch<ReducerAction<MainReducer>>] = () => {\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    return [state, dispatch]\n}\n\nexport {useMainState}\n","import React from 'react';\nimport { Typography } from 'antd';\nimport { searchRequest } from './api'; \nimport { SearchComponent, ListComponent, LoadMoreComponent } from './components';\nimport { useMainState } from './reducer';\nimport { newSearch, addMovie } from './reducer/actions';\nimport './App.css';\n\nconst {Title} = Typography;\n\n\nconst App: React.FC = () => {\n    const [state, dispatch] = useMainState();\n\n    const onSearch = async (query: string) => {\n        try {\n            const data = await searchRequest(query, 1);\n            \n            dispatch(newSearch(data.Search, data.totalResults, query));\n            console.log(state.movies)\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const onLoad = async () => {\n        try {\n            const data = await searchRequest(state.query, state.page);\n\n            dispatch(addMovie(data.Search));\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    return (\n        <div className=\"site-layout-content\">\n            <Title>Search a movie</Title>\n            <SearchComponent  onSearch={onSearch} />\n                <ListComponent \n                    movies={state.movies}\n                    loadMore={<LoadMoreComponent\n                        loading={state.refetchingLoding} \n                        hasMore={state.total > state.movies.length}\n                        onLoad={onLoad}\n                    />}\n                />\n        </div>\n    );\n}; \n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}